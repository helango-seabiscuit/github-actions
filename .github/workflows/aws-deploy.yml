name: deploy aws via cdk
on: [push,workflow_dispatch]
jobs:
  aws-cdk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - uses: actions/setup-node@v2
        with:
          node-version: "19"
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
      - name: Build app
        working-directory: ./reactive-music
        run: ./gradlew clean build
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: 'us-west-2'
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set short sha
        id: sha_short
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build, tag, and push image to Amazon ECR
#        uses: docker/build-push-action@v2
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        with:
##          context: ./.
#          file: ./Dockerfile
#          push: true
#          provenance: false
#          region: us-west-2
#          tags: ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG-${{ steps.sha_short.outputs.sha_short }}

        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: reactive-music
          IMAGE_TAG: reactive-music-image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG  --file ./Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Install dependencies
        working-directory: ./aws-app-cdk
        run: | 
         npm install
         npm install -g aws-cdk
      - name: Synth cdk
        working-directory: ./aws-app-cdk
        run: cdk synth
      - name: Deploy stack
        working-directory: ./aws-app-cdk
        run: |
         cdk bootstrap
         cdk deploy --all --require-approval never